version: "3.8"

services:
  backend:
    hostname: backend
    container_name: backend
    build:
      dockerfile: Dockerfile
      context: ..
      args:
        MODULE: backend
        PORT: 7001
    networks:
      - bellis
    restart: always
    ports:
      - "7001:7001"

  dispatcher:
    hostname: dispatcher
    container_name: dispatcher
    build:
      dockerfile: Dockerfile
      context: ..
      args:
        MODULE: dispatcher
    networks:
      - bellis
    restart: always

  envoy:
    hostname: envoy
    container_name: envoy
    build:
      dockerfile: Dockerfile
      context: ..
      args:
        MODULE: envoy
    networks:
      - bellis
    restart: always

  influxdb:
    hostname: influxdb
    container_name: influxdb
    image: influxdb
    networks:
      - bellis
    restart: always
    environment:
      - DOCKER_INFLUXDB_INIT_ORG=bellis
      - DOCKER_INFLUXDB_INIT_BUCKET=backend
      - DOCKER_INFLUXDB_INIT_USERNAME=minoic
      - DOCKER_INFLUXDB_INIT_PASSWORD=Nightgod_
      - TZ=Asia/Shanghai
    ports:
      - "8086:8086"
    volumes:
      - /bellis/dist/database/influxdb:/var/lib/influxdb2

  mongo1:
    hostname: mongo1
    container_name: mongo1
    image: mongo
    networks:
      - bellis
    expose:
      - 27017
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
    volumes:
      - /bellis/dist/database/mongo1/configdb:/data/configdb
      - /bellis/dist/database/mongo1/db:/data/db
  mongo2:
    hostname: mongo2
    container_name: mongo2
    image: mongo
    networks:
      - bellis
    expose:
      - 27017
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
    volumes:
      - /bellis/dist/database/mongo2/configdb:/data/configdb
      - /bellis/dist/database/mongo2/db:/data/db
  mongo3:
    hostname: mongo3
    container_name: mongo3
    image: mongo
    networks:
      - bellis
    expose:
      - 27017
    restart: always
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
    volumes:
      - /bellis/dist/database/mongo3/configdb:/data/configdb
      - /bellis/dist/database/mongo3/db:/data/db

  mongo-init:
    image: mongo
    networks:
      - bellis
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    restart: on-failure
    command:
      - mongosh
      - mongodb://mongo1:27017/admin
      - --eval
      - 'rs.initiate({ _id: "rs0", members: [{_id:1,host:"mongo1:27017"},{_id:2,host:"mongo2:27017"},{_id:3,host:"mongo3:27017"}]})'

  mongo-express:
    image: mongo-express:1.0.0-alpha.4
    container_name: mongo-express
    hostname: mongo-express
    ports:
      - "8081:8081"
    networks:
      - bellis
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    restart: always
    environment:
      - ME_CONFIG_OPTIONS_EDITORTHEME=ambiance
      - ME_CONFIG_MONGODB_URL=mongodb://mongo1,mongo2,mongo3?replicaSet=rs0

  redis:
    hostname: redis
    container_name: redis
    image: redis
    networks:
      - bellis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - /bellis/dist/database/redis:/data

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    networks:
      - bellis
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis

  sentry:
    hostname: sentry
    container_name: sentry
    build:
      dockerfile: Dockerfile
      context: ..
      args:
        MODULE: sentry
    networks:
      - bellis
    restart: always

    
networks:
  bellis:
    external: true