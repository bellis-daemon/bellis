syntax = "proto3";

package bellis.backend.mobile.entity;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "public/public.proto";

option go_package = 'github.com/bellis-daemon/bellis/modules/backend/app/mobile/entity';

message EntityID{
  string ID =1;
  optional string scheme = 2;
}

message EntityStatus{
  string ID = 1;
  bool live = 2;
  string up_time = 3;
  string sentry_time = 4;
  string err_message = 5;
  google.protobuf.Struct fields = 6;
  repeated bool live_series = 7;
  int64 response_time = 8;
}

message AllEntityStatus{
  string StreamKey = 1;
  repeated EntityStatus status = 2;
}

message StreamAckRequire{
  string StreamKey = 1;
}

message EntitySeries{
  string ID = 1;
  google.protobuf.Struct series = 2;
}

message Entity{
  string ID = 1;
  string name  = 2;
  string description = 3;
  string userID  =4;
  string createdAt = 5;
  string scheme = 6;
  bool active = 7;
  EntityPublicOptions public = 8;
  google.protobuf.Struct options = 9;
}

message EntityPublicOptions{
  optional int32 threshold = 1;
  repeated string triggerList = 2;
  optional uint32 multiplier = 3;
}

message AllEntities{
  repeated Entity entities = 1;
}

message OfflineLogRequest{
  string entityID = 1;
  public.Pagination pagination = 2;
}

message OfflineLogPage{
  int32 length = 1;
  repeated OfflineLog offlineLogs = 2;
}

message OfflineLog{
  string offlineTime = 1;
  string duration = 2;
  repeated SentryLog sentryLogs = 3;
}

message SentryLog{
  string sentryName = 1;
  string sentryTime = 2;
  string errorMessage = 3;
}

service EntityService{
  rpc DeleteEntity(EntityID) returns(google.protobuf.Empty);
  rpc NewEntity(Entity) returns(EntityID);
  rpc UpdateEntity(Entity) returns (google.protobuf.Empty);
  rpc GetEntity(EntityID) returns (Entity);
  rpc GetAllEntities(google.protobuf.Empty) returns(AllEntities);
  rpc GetStatus(EntityID) returns (EntityStatus);
  rpc GetAllStatus(google.protobuf.Empty) returns(AllEntityStatus);
  rpc GetSeries(EntityID) returns(EntitySeries);
  rpc GetOfflineLog(OfflineLogRequest) returns (OfflineLogPage);
  rpc GetStreamAllStatus(google.protobuf.Empty) returns(stream AllEntityStatus);
  rpc StreamAck(StreamAckRequire) returns(google.protobuf.Empty);
}