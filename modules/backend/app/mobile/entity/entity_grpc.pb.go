// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: entity/entity.proto

package entity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EntityService_DeleteEntity_FullMethodName       = "/bellis.backend.mobile.entity.EntityService/DeleteEntity"
	EntityService_NewEntity_FullMethodName          = "/bellis.backend.mobile.entity.EntityService/NewEntity"
	EntityService_UpdateEntity_FullMethodName       = "/bellis.backend.mobile.entity.EntityService/UpdateEntity"
	EntityService_GetEntity_FullMethodName          = "/bellis.backend.mobile.entity.EntityService/GetEntity"
	EntityService_GetAllEntities_FullMethodName     = "/bellis.backend.mobile.entity.EntityService/GetAllEntities"
	EntityService_GetStatus_FullMethodName          = "/bellis.backend.mobile.entity.EntityService/GetStatus"
	EntityService_GetAllStatus_FullMethodName       = "/bellis.backend.mobile.entity.EntityService/GetAllStatus"
	EntityService_GetSeries_FullMethodName          = "/bellis.backend.mobile.entity.EntityService/GetSeries"
	EntityService_GetOfflineLog_FullMethodName      = "/bellis.backend.mobile.entity.EntityService/GetOfflineLog"
	EntityService_GetStreamAllStatus_FullMethodName = "/bellis.backend.mobile.entity.EntityService/GetStreamAllStatus"
	EntityService_StreamAck_FullMethodName          = "/bellis.backend.mobile.entity.EntityService/StreamAck"
)

// EntityServiceClient is the client API for EntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityServiceClient interface {
	DeleteEntity(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NewEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*EntityID, error)
	UpdateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEntity(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*Entity, error)
	GetAllEntities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllEntities, error)
	GetStatus(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*EntityStatus, error)
	GetAllStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllEntityStatus, error)
	GetSeries(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*EntitySeries, error)
	GetOfflineLog(ctx context.Context, in *OfflineLogRequest, opts ...grpc.CallOption) (*OfflineLogPage, error)
	GetStreamAllStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EntityService_GetStreamAllStatusClient, error)
	StreamAck(ctx context.Context, in *StreamAckRequire, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type entityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityServiceClient(cc grpc.ClientConnInterface) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) DeleteEntity(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EntityService_DeleteEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) NewEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*EntityID, error) {
	out := new(EntityID)
	err := c.cc.Invoke(ctx, EntityService_NewEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EntityService_UpdateEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetEntity(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, EntityService_GetEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetAllEntities(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllEntities, error) {
	out := new(AllEntities)
	err := c.cc.Invoke(ctx, EntityService_GetAllEntities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetStatus(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*EntityStatus, error) {
	out := new(EntityStatus)
	err := c.cc.Invoke(ctx, EntityService_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetAllStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllEntityStatus, error) {
	out := new(AllEntityStatus)
	err := c.cc.Invoke(ctx, EntityService_GetAllStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetSeries(ctx context.Context, in *EntityID, opts ...grpc.CallOption) (*EntitySeries, error) {
	out := new(EntitySeries)
	err := c.cc.Invoke(ctx, EntityService_GetSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetOfflineLog(ctx context.Context, in *OfflineLogRequest, opts ...grpc.CallOption) (*OfflineLogPage, error) {
	out := new(OfflineLogPage)
	err := c.cc.Invoke(ctx, EntityService_GetOfflineLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) GetStreamAllStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EntityService_GetStreamAllStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &EntityService_ServiceDesc.Streams[0], EntityService_GetStreamAllStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &entityServiceGetStreamAllStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EntityService_GetStreamAllStatusClient interface {
	Recv() (*AllEntityStatus, error)
	grpc.ClientStream
}

type entityServiceGetStreamAllStatusClient struct {
	grpc.ClientStream
}

func (x *entityServiceGetStreamAllStatusClient) Recv() (*AllEntityStatus, error) {
	m := new(AllEntityStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *entityServiceClient) StreamAck(ctx context.Context, in *StreamAckRequire, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EntityService_StreamAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServiceServer is the server API for EntityService service.
// All implementations should embed UnimplementedEntityServiceServer
// for forward compatibility
type EntityServiceServer interface {
	DeleteEntity(context.Context, *EntityID) (*emptypb.Empty, error)
	NewEntity(context.Context, *Entity) (*EntityID, error)
	UpdateEntity(context.Context, *Entity) (*emptypb.Empty, error)
	GetEntity(context.Context, *EntityID) (*Entity, error)
	GetAllEntities(context.Context, *emptypb.Empty) (*AllEntities, error)
	GetStatus(context.Context, *EntityID) (*EntityStatus, error)
	GetAllStatus(context.Context, *emptypb.Empty) (*AllEntityStatus, error)
	GetSeries(context.Context, *EntityID) (*EntitySeries, error)
	GetOfflineLog(context.Context, *OfflineLogRequest) (*OfflineLogPage, error)
	GetStreamAllStatus(*emptypb.Empty, EntityService_GetStreamAllStatusServer) error
	StreamAck(context.Context, *StreamAckRequire) (*emptypb.Empty, error)
}

// UnimplementedEntityServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEntityServiceServer struct {
}

func (UnimplementedEntityServiceServer) DeleteEntity(context.Context, *EntityID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedEntityServiceServer) NewEntity(context.Context, *Entity) (*EntityID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEntity not implemented")
}
func (UnimplementedEntityServiceServer) UpdateEntity(context.Context, *Entity) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedEntityServiceServer) GetEntity(context.Context, *EntityID) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedEntityServiceServer) GetAllEntities(context.Context, *emptypb.Empty) (*AllEntities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEntities not implemented")
}
func (UnimplementedEntityServiceServer) GetStatus(context.Context, *EntityID) (*EntityStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedEntityServiceServer) GetAllStatus(context.Context, *emptypb.Empty) (*AllEntityStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStatus not implemented")
}
func (UnimplementedEntityServiceServer) GetSeries(context.Context, *EntityID) (*EntitySeries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeries not implemented")
}
func (UnimplementedEntityServiceServer) GetOfflineLog(context.Context, *OfflineLogRequest) (*OfflineLogPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfflineLog not implemented")
}
func (UnimplementedEntityServiceServer) GetStreamAllStatus(*emptypb.Empty, EntityService_GetStreamAllStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamAllStatus not implemented")
}
func (UnimplementedEntityServiceServer) StreamAck(context.Context, *StreamAckRequire) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamAck not implemented")
}

// UnsafeEntityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServiceServer will
// result in compilation errors.
type UnsafeEntityServiceServer interface {
	mustEmbedUnimplementedEntityServiceServer()
}

func RegisterEntityServiceServer(s grpc.ServiceRegistrar, srv EntityServiceServer) {
	s.RegisterService(&EntityService_ServiceDesc, srv)
}

func _EntityService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_DeleteEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).DeleteEntity(ctx, req.(*EntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_NewEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).NewEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_NewEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).NewEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_UpdateEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntity(ctx, req.(*EntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetAllEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetAllEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetAllEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetAllEntities(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetStatus(ctx, req.(*EntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetAllStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetAllStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetAllStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetAllStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetSeries(ctx, req.(*EntityID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetOfflineLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetOfflineLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_GetOfflineLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetOfflineLog(ctx, req.(*OfflineLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_GetStreamAllStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntityServiceServer).GetStreamAllStatus(m, &entityServiceGetStreamAllStatusServer{stream})
}

type EntityService_GetStreamAllStatusServer interface {
	Send(*AllEntityStatus) error
	grpc.ServerStream
}

type entityServiceGetStreamAllStatusServer struct {
	grpc.ServerStream
}

func (x *entityServiceGetStreamAllStatusServer) Send(m *AllEntityStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _EntityService_StreamAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamAckRequire)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).StreamAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EntityService_StreamAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).StreamAck(ctx, req.(*StreamAckRequire))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityService_ServiceDesc is the grpc.ServiceDesc for EntityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bellis.backend.mobile.entity.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteEntity",
			Handler:    _EntityService_DeleteEntity_Handler,
		},
		{
			MethodName: "NewEntity",
			Handler:    _EntityService_NewEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _EntityService_UpdateEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _EntityService_GetEntity_Handler,
		},
		{
			MethodName: "GetAllEntities",
			Handler:    _EntityService_GetAllEntities_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _EntityService_GetStatus_Handler,
		},
		{
			MethodName: "GetAllStatus",
			Handler:    _EntityService_GetAllStatus_Handler,
		},
		{
			MethodName: "GetSeries",
			Handler:    _EntityService_GetSeries_Handler,
		},
		{
			MethodName: "GetOfflineLog",
			Handler:    _EntityService_GetOfflineLog_Handler,
		},
		{
			MethodName: "StreamAck",
			Handler:    _EntityService_StreamAck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamAllStatus",
			Handler:       _EntityService_GetStreamAllStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "entity/entity.proto",
}
